@model Perspektiva.Areas.Admin.Models.PerspectivesViewModel

@{
    ViewData["Title"] = "Index";
}

<h1>Submit guess</h1>


<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Untitled</title>

    <link rel="stylesheet" href="~/css/mdb.min.css">
    <link rel="stylesheet" href="~/css/mdb.min.css.map">
    <link rel="stylesheet" href="~/css/rainbow_button.css">
    <link rel="stylesheet" href="~/css/MyPerspectives.css">
    <link rel="stylesheet" href="~/css/imageUpload.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/js/bootstrap.bundle.min.js"></script>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/tilt.js/1.2.1/tilt.jquery.min.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Bitter:400,700">
    <link rel="stylesheet" href="~/css/site.css">
    <link rel="stylesheet" href="~/css/map.css">
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBx4l17T01zXX2DOGy1lh84cDFsWoBvIWU&callback=initMap&v=weekly"
            defer></script>





</head>


<script id="map-jscode" type="text/javascript">

    var markers = [];
    var uniqueId = 1;

    let map;

    function initMap() {
        const mapDiv = document.getElementById("map-js");
        const map = new google.maps.Map(mapDiv, {
            center: { lat: 46.1889873, lng: 14.7839395 },
            zoom: 8,
            disableDefaultUI: true,
            //mapTypeId: 'terrain' //TODO: style terrain map
            //mapId: "989e6e56568e2cc6"
        });
        map.setTilt(45);


        //alert
        //google.maps.event.addListener(map, 'click', function( event ){
        //       alert( "Latitude: "+event.latLng.lat()+" "+", longitude: "+event.latLng.lng() );
        //    });


        //Attach click event handler to the map.
        google.maps.event.addListener(map, 'click', function(e) {

            //Determine the location where the user has clicked.
            var location = e.latLng;

            const image = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png";

            //Create a marker and placed it on the map.
            var marker = new google.maps.Marker({
                position: location,
                map: map,
                icon: image,
                draggingCursor: 'pointer',

            });

            //Attach click event handler to the map.

            //Set unique id
            marker.id = uniqueId;



            if (marker.id > 1) {

                DeleteMarker(uniqueId - 1);
            }

            //Attach click event handler to the marker.
            google.maps.event.addListener(marker, "click", function(e) {

                var content = 'Latitude: ' + location.lat() + '<br />Longitude: ' + location.lng();
                //content += "<br /><input type = 'button' va;ue = 'Delete' onclick = 'DeleteMarker(" + marker.id + ");' value = 'Delete' />";
                content += '<br /> uniqueId:' + marker.id;

                var infoWindow = new google.maps.InfoWindow({ content: content });
                infoWindow.open(map, marker);


            });
            uniqueId++;


            //Add marker to the array.
            markers.push(marker);
        });
    };


    window.initMap = initMap;


    function DeleteMarker(id) {
        //Find and remove the marker from the Array
        for (var i = 0; i < markers.length; i++) {
            if (markers[i].id == id) {
                //Remove the marker from Map
                markers[i].setMap(null);

                //Remove the marker from array.
                markers.splice(i, 1);
                return;
            }
        }
    };


</script>


<script type="text/javascript">

    function CollectUserGuess() {
        if (markers.length == 0) {
            throw new Error("Select a location idiot");

        } else {
            ///fill guessed
            var guessjson =

            {
                "Latitude": markers[0].position.lat(),
                "Longitude": markers[0].position.lng()
            };

            return guessjson;

            //console.log(markers[0].position.lat());
        }
    }

    function SendLatLon() {
        var guessjson = "";
        try {
            guessjson = JSON.stringify(CollectUserGuess());
            console.log(guessjson);

        } catch (e) {
            console.log(e);
            alert(e);
            return;
        }

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetGuessedLocation", "Perspective")',
            contentType: "application/json; charset=utf-8",
            data: { guesspost: guessjson },
            dataType: "json",
            success: OnSuccess,
            failure: function(response) {
                alert(response.d);
            }
        });
    }
    function OnSuccess(response) {
        alert(response.d);
    }



</script>



<div class="d-grid gap-2 d-md-block">
    <button class="btn btn-primary" type="button" onclick="location.href='@Url.Action("Index","Home", new { Area = "" })'"> Back</button>
</div>
<body>

    <div class="container">
        <div class="container-perspective">
            <div class="card mb-3">
                <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.PerspectivePictureByte)" class="card-img-top" alt="ALT" />

                <div class="card-body">
                    <h5 class="card-title" style="word-wrap: break-word">@Model.Title</h5>
                    <p class="card-text">@Model.Description</p>
                    <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
                </div>
            </div>
        </div>

        <div class="container-map">
            <div class="card mb-3">

                <div class="card-map">
                    <div class="">
                        <div>
                            <div id="map-js" style="width:100%;height:600px; "></div>
                        </div>
                    </div>


                    <div class="card-body">

                        <div class="file-upload">
                            <button class="file-upload-btn" type="button" onclick="$('.file-upload-input').trigger( 'click' )">Add Image</button>

                            <div class="image-upload-wrap">
                                <input id="imageUploadForm" class="file-upload-input" type='file' onchange="readURL(this);" accept="image/*" />
                                <div class="drag-text">
                                    <h3>Drag and drop a file or select add Image</h3>
                                </div>
                            </div>
                            <div class="file-upload-content">
                                <img class="file-upload-image" src="#" alt="your image" />
                                <div class="image-title-wrap">
                                    <button type="button" onclick="removeUpload()" class="remove-image">Remove <span class="image-title">Uploaded Image</span></button>
                                </div>
                            </div>
                        </div>


                    </div>

                    <input type="submit" value="Btn" class="btn btn-primary" id="btnSubmitGuess" onclick="prepareForSending();" />
                </div>

            </div>


        </div>

       
        @Html.HiddenFor(x => x.ID, new { id = "PerspectiveID" })

    </div>
    </div>


    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
    }

        <script id="onloadjs" type="text/javascript">

            //$(document).ready(function() {

            //    var btn = document.getElementById("btnSubmitGuess");

            //    btn.addEventListener("click", function() {
            //        SendDocs();

            //        //SendLatLon();
            //    }, false);

            //});


        </script>

        <script>

            function prepareForSending() {

                var formData = new FormData();
                var totalFiles = document.getElementById("imageUploadForm").files.length;


                for (var i = 0; i < totalFiles; i++) {
                    var file = document.getElementById("imageUploadForm").files[i];
                    formData.append("UserGuess_Picture", file);
                }

                const LatLon = JSON.stringify(CollectUserGuess());


                var PerspectiveID = $('#PerspectiveID').val();

                formData.append(LatLon, Text);

                formData.append(PerspectiveID, Text);

                sendDocs(formData)

            }

            function sendDocs(formData) {

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetGuessedData", "Perspective")',
                    data: formData,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    success: function(response) {
                        if (response.success) {
                            alert(response.responseText);
                        } else {
                            // DoSomethingElse()
                            alert(response.responseText);
                        }
                    },
                    error: function(response) {
                        console.log(response);
                        alert("error!");  //
                    }

                });
            }
                        


            //////////////////////////

            function readURL(input) {
                if (input.files && input.files[0]) {

                    var reader = new FileReader();

                    reader.onload = function(e) {
                        $('.image-upload-wrap').hide();

                        $('.file-upload-image').attr('src', e.target.result);
                        $('.file-upload-content').show();

                        $('.image-title').html(input.files[0].name);
                    };

                    reader.readAsDataURL(input.files[0]);

                } else {
                    removeUpload();
                }
            }

            function removeUpload() {
                $('.file-upload-input').replaceWith($('.file-upload-input').clone());
                $('.file-upload-content').hide();
                $('.image-upload-wrap').show();
            }
            $('.image-upload-wrap').bind('dragover', function() {
                $('.image-upload-wrap').addClass('image-dropping');
            });
            $('.image-upload-wrap').bind('dragleave', function() {
                $('.image-upload-wrap').removeClass('image-dropping');
            });


            $('.js-tilt').tilt({
                scale: 1.00,
                perspective: 500
            })
        </script>




    </body>

